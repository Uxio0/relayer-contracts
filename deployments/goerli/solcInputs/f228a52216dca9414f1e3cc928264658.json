{
  "language": "Solidity",
  "sources": {
    "contracts/Relayer.sol": {
      "content": "// SPDX-License-Identifier: LGPL-3.0\npragma solidity ^0.8.9;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\n/// @title Safe Relayer - A relayer for Safe multisig wallet\n/// @author Uxío Fuentefría - <uxio@safe.global>\n/// @custom:experimental This is an experimental contract.\ncontract Relayer is Ownable {\n    IERC20 public token;\n    uint256 public maxPriorityFee;\n    uint256 public relayerFee;\n    bytes4 public method;\n\n    /// @dev Init contract\n    /// @param _token Token for paying refunds. Should be the wrapped version of the base currency (e.g. WETH for mainnet)\n    /// @param _maxPriorityFee MaxPriorityFee clients will be paying, so relayer cannot be abused to drain user funds\n    /// @param _relayerFee Relayer fee that will be added to the gasPrice when calculating refunds\n    /// @param _method Method id that will be called on the Safe\n    constructor(\n        IERC20 _token,\n        uint256 _maxPriorityFee,\n        uint256 _relayerFee,\n        bytes4 _method\n    ) {\n        require(address(_token) != address(0), \"Token cannot be empty\");\n\n        require(_maxPriorityFee > 0, \"MaxPriorityFee must be higher than 0\");\n\n        token = _token;\n        maxPriorityFee = _maxPriorityFee;\n        relayerFee = _relayerFee;\n        method = _method;\n        // Prevent issues with deterministic deployment\n        // solhint-disable-next-line avoid-tx-origin\n        transferOwnership(tx.origin);\n    }\n\n    /// @param _token New token for paying refunds\n    function changeToken(IERC20 _token) public onlyOwner {\n        token = _token;\n    }\n\n    /// @param _maxPriorityFee New MaxPriorityFee clients will be paying\n    function changeMaxPriorityFee(uint256 _maxPriorityFee) public onlyOwner {\n        maxPriorityFee = _maxPriorityFee;\n    }\n\n    /// @param _relayerFee New Relayer fee\n    function changeRelayerFee(uint256 _relayerFee) public onlyOwner {\n        relayerFee = _relayerFee;\n    }\n\n    /// @notice Recover tokens sent by mistake to this contract\n    /// @dev Ether recovery is not implemented as contract is not payable\n    /// @param withdrawToken token to recover\n    /// @param target destination for the funds\n    function recoverFunds(IERC20 withdrawToken, address target)\n        public\n        onlyOwner\n    {\n        withdrawToken.transfer(target, withdrawToken.balanceOf(address(this)));\n    }\n\n    /// @notice Relay a transaction and get refunded\n    /// @dev It's responsability of the sender to check if the Safe has enough funds to pay\n    /// @param target Safe to call\n    /// @param functionData ABI encoded Safe `execTransaction` without the method selector\n    /// @param target destination for the refund\n    function relay(\n        address target,\n        bytes calldata functionData,\n        address refundAccount\n    ) external {\n        // 9k are for the token transfers + 21k base + data (8 bytes method + 32 bytes address + data)\n        // We will use 14 as the gas price per data byte, to avoid overcharging too much\n        uint256 gas = gasleft();\n        uint256 txMaxPriorityFee = tx.gasprice - block.basefee;\n        require(\n            txMaxPriorityFee <= maxPriorityFee,\n            \"maxPriorityFee is higher than expected\"\n        );\n\n        uint256 additionalGas = 30000 + (40 + functionData.length) * 14;\n        uint256 gasPrice = tx.gasprice + relayerFee;\n\n        // The method id is appended by the contract to avoid that another method is called\n        bytes memory data = abi.encodePacked(method, functionData);\n        bool success;\n        // Assembly reduced the costs by 400 gas\n        // solhint-disable-next-line no-inline-assembly\n        assembly {\n            success := call(\n                sub(gas(), 12000),\n                target,\n                0,\n                add(data, 0x20),\n                mload(data),\n                0,\n                0\n            )\n        }\n        require(success, \"Could not successfully call target\");\n\n        // It's responsability of the sender to check if the Safe has enough funds to pay\n        address refundTarget = refundAccount == address(0)\n            ? msg.sender\n            : refundAccount;\n        require(\n            token.transferFrom(\n                target,\n                refundTarget,\n                (gas - gasleft() + additionalGas) * gasPrice\n            ),\n            \"Could not refund sender\"\n        );\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}